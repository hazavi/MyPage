@page "/todos/delete"
@inject MyPage.Data.PageDbContext DB
@using ToDo.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>ToDos</h4>
    <hr />
    @if (todos is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@todos.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Text</dt>
            <dd class="col-sm-10">@todos.Text</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DueDate</dt>
            <dd class="col-sm-10">@todos.DueDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@todos.DateCreated</dd>
        </dl>
        <EditForm method="post" Model="todos" OnValidSubmit="DeleteToDos" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(todos is null)">Delete</button> |
            <a href="/todos">Back to List</a>
        </EditForm>
    }
</div>

@code {
    ToDos? todos;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        todos = await DB.ToDos.FirstOrDefaultAsync(m => m.Id == Id);

        if (todos is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteToDos()
    {
        DB.ToDos.Remove(todos!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/todos");
    }
}
