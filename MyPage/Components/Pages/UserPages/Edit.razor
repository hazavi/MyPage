@page "/users/edit"
@inject MyPage.Data.PageDbContext DB
@using MyPage.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject MyPage.Service.LoginService loginService

<PageTitle>Edit</PageTitle>

@if (loginService.IsLoggedIn && loginService.IsAdmin)
{
    <h1>Edit</h1>

    <hr />
    @if (User is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <input type="hidden" name="User.Id" value="@User.Id" />
                    <div class="mb-3">
                        <label for="username" class="form-label">UserName:</label>
                        <InputText id="username" @bind-Value="User.UserName" class="form-control" />
                        <ValidationMessage For="() => User.UserName" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText id="password" @bind-Value="User.Password" class="form-control" />
                        <ValidationMessage For="() => User.Password" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="password2" class="form-label">Password2:</label>
                        <InputText id="password2" @bind-Value="User.Password2" class="form-control" />
                        <ValidationMessage For="() => User.Password2" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    }
}
else
{
    <p>You do not have permission to view this page.</p>
    @if (!loginService.IsLoggedIn)
    {
        <p>Please <a href="/login">log in</a>.</p>
    }
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!loginService.IsLoggedIn || !loginService.IsAdmin)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        User ??= await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateUser()
    {
        DB.Attach(User!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    bool UserExists(int id)
    {
        return DB.Users.Any(e => e.Id == id);
    }
}
